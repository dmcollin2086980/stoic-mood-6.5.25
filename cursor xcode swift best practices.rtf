{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # iOS App Development Best Practices (Swift & Xcode)\
\
This document provides a comprehensive set of best practices and industry standards for developing iPhone applications using Swift in Xcode. It is intended to be used as a file context for AI-assisted coding to ensure high-quality, maintainable, and robust code.\
\
---\
\
## \uc0\u55357 \u56514  1. Project Setup & Xcode Configuration\
\
A well-organized project is the foundation of a scalable app.\
\
* **Project Structure (Group by Feature):** Organize files by feature, not by type. Each feature folder (e.g., `Profile`, `Feed`, `Settings`) should contain the relevant Views, ViewModels/Controllers, and Models. Place shared code in a `Shared` or `Common` group.\
    ```\
    ProjectName/\
    \uc0\u9500 \u9472 \u9472  App/\
    \uc0\u9474    \u9500 \u9472 \u9472  AppDelegate.swift\
    \uc0\u9474    \u9492 \u9472 \u9472  SceneDelegate.swift\
    \uc0\u9500 \u9472 \u9472  Features/\
    \uc0\u9474    \u9500 \u9472 \u9472  Profile/\
    \uc0\u9474    \u9474    \u9500 \u9472 \u9472  ProfileView.swift\
    \uc0\u9474    \u9474    \u9500 \u9472 \u9472  ProfileViewModel.swift\
    \uc0\u9474    \u9474    \u9492 \u9472 \u9472  ProfileModel.swift\
    \uc0\u9474    \u9492 \u9472 \u9472  ...\
    \uc0\u9500 \u9472 \u9472  Shared/\
    \uc0\u9474    \u9500 \u9472 \u9472  Networking/\
    \uc0\u9474    \u9500 \u9472 \u9472  Models/\
    \uc0\u9474    \u9492 \u9472 \u9472  Views/\
    \uc0\u9492 \u9472 \u9472  Resources/\
        \uc0\u9492 \u9472 \u9472  Assets.xcassets\
    ```\
* **Asset Catalogs (`Assets.xcassets`):** Use the asset catalog for **all** colors and images.\
    * **Colors:** Define a color set for every color used in the app. This simplifies theming and dark mode support.\
    * **Images:** Use symbol images (SF Symbols) whenever possible for resolution-independent, template-style icons.\
* **Info.plist:** Keep this file clean. For any keys you add, include a comment explaining its purpose (e.g., ``).\
* **Secrets Management:** **Never** hardcode API keys or other secrets. Use Xcode Configurations (`.xcconfig` files) and the `Info.plist` to manage them for Debug, Release, and other builds.\
\
---\
\
## \uc0\u55356 \u57256  2. UI Development (UIKit & SwiftUI)\
\
Choose a UI framework and follow its best practices.\
\
### 2.1. General UI Principles\
\
* **Adaptive UI:** Design for all iPhone sizes from the start. Use Auto Layout or SwiftUI's adaptive layout system. Avoid fixed coordinates and sizes.\
* **Programmatic UI vs. Storyboards/XIBs (for UIKit):**\
    * **Storyboards/XIBs:** Good for simple screens and visualizing flow. Can become problematic with merge conflicts in team environments.\
    * **Programmatic UI:** Highly recommended for complex, dynamic views and collaborative projects. It's more reusable, easier to review in pull requests, and avoids merge conflicts.\
\
### 2.2. SwiftUI Best Practices\
\
* **State Management:** Understand and correctly use state wrappers.\
    * `@State`: For simple, transient view-owned state.\
    * `@Binding`: To create a two-way connection to a state owned by another view.\
    * `@StateObject`: For creating and owning a reference-type view model (`ObservableObject`). The view owns the source of truth.\
    * `@ObservedObject`: For observing a reference-type view model that is owned by another view.\
* **Small, Reusable Views:** Decompose complex views into smaller, single-purpose child views.\
* **Use Previews:** Leverage SwiftUI Previews (`#Preview`) extensively to iterate on UI quickly without running the full app.\
\
### 2.3. UIKit Best Practices\
\
* **Auto Layout:** Use `NSLayoutConstraint` anchors programmatically. Avoid manual frame calculations.\
* **View Controller Lifecycle:** Understand the `viewDidLoad`, `viewWillAppear`, `viewDidAppear` lifecycle to perform actions at the right time. Load data in `viewDidLoad`.\
* **`UITableView` & `UICollectionView`:**\
    * Use `DiffableDataSource` for safe and efficient updates.\
    * Always reuse cells with `dequeueReusableCell(withIdentifier:for:)`.\
    * Self-sizing cells are preferred for dynamic content.\
\
---\
\
## \uc0\u55356 \u57303 \u65039  3. Architecture & App Flow\
\
* **MVVM (Model-View-ViewModel):** The recommended pattern for both SwiftUI (natively supported) and UIKit apps. It enhances testability and separation of concerns.\
* **Coordinator Pattern (for UIKit):** Use Coordinators to manage navigation logic, removing this responsibility from `UIViewController`s. This makes view controllers more reusable and easier to test.\
* **Dependency Injection (DI):** Don't let views or view models create their own dependencies (e.g., network services). Inject them through the initializer. This is crucial for testing.\
\
```swift\
// Good: Dependency is injected\
class MyViewModel \{\
    private let networkService: NetworkServiceProtocol\
    init(networkService: NetworkServiceProtocol) \{\
        self.networkService = networkService\
    \}\
\}\
\uc0\u9889  4. Concurrency & Networking\
Main Thread for UI Updates: All UI updates must happen on the main thread.\
Modern Concurrency (async/await): Prefer async/await for all asynchronous operations. Use @MainActor to ensure UI-related code runs on the main thread.\
Swift\
\
@MainActor\
func updateProfileImage(with image: UIImage) \{\
    profileImageView.image = image\
\}\
\
func fetchUserData() async \{\
    do \{\
        let user = try await networkService.fetchUser()\
        await updateUI(with: user)\
    \} catch \{\
        // Handle error\
    \}\
\}\
URLSession: Use the shared URLSession.shared for simple network requests.\
\uc0\u55358 \u56800  5. Resource & Memory Management\
Mobile devices have limited resources. Efficient management is critical.\
\
ARC and Retain Cycles: Swift uses Automatic Reference Counting (ARC). Be vigilant about retain cycles, especially in closures. Use [weak self] or [unowned self] to break them.\
Swift\
\
// Use [weak self] to prevent a retain cycle\
viewModel.onDataLoaded = \{ [weak self] data in\
    self?.tableView.reloadData()\
\}\
Use Xcode's Tools: Regularly profile your app with the Memory Graph Debugger to find leaks and the Energy Log in Instruments to check battery impact.\
Image Loading: Load large images asynchronously and consider downsampling them to the size of the UIImageView to conserve memory.\
\uc0\u9855  6. Accessibility (A11y) & Localization (L10n)\
These are not optional features; they are industry standards for high-quality apps.\
\
Accessibility:\
Set descriptive accessibilityLabels for all UI elements without text.\
Ensure custom controls are fully accessible by implementing the UIAccessibility protocol.\
Support Dynamic Type by using text styles (e.g., .headline, .body) instead of fixed font sizes.\
Use the Accessibility Inspector in Xcode to audit your app.\
Localization:\
Do not hardcode user-facing strings.\
Use String(localized: "key") or NSLocalizedString for all text.\
Use Xcode's export/import feature for localization to streamline translation.\
\uc0\u9997 \u65039  7. General Swift Best Practices\
Clarity at the Point of Use: Write code that is self-documenting.\
Value Types over Reference Types: Prefer struct and enum over class to prevent side effects and improve performance. Use classes when you need reference semantics (e.g., ViewModels).\
guard for Early Exits: Use guard let for unwrapping optionals and validating conditions at the top of a function.\
Error Handling: Use Swift's try/catch mechanism for recoverable errors. Avoid force-unwrapping (!) and force-casting (as!) except in rare, safe circumstances.\
Final by Default: Mark classes as final unless you specifically design them for subclassing. This improves performance.}